-> O QUE É SOLID?
	SOLID é um acrônimo dos princípios da programação 
orientada a objetos descritas por Robert C. Martin.
	Auxiliam o programador a escrever códigos mais limpos,
facilitando a refatoração e estimulando o reaproveitamento de 
código.
	Os princípios abordados no acrônimo são:
	-Single Responsibility Principle(Princípio da Responsabilidade Única);
	-Open Closed Principle(Princípio Aberto-Fechado);
	-Liskov Substitution Principle(Princípio da Substituição de Liskov);
	-Interface Segregation Principle(Princípio da Segregação de Interface);
	-Dependency Inversion Principle (Princípio da Inversão da Dependência);

	Vamos passar de um por um.

	-Single Responsibility Principle(Princípio da Responsabilidade Única)
	"Uma classe deve ter um, e somente um, motivo para mudar.
	A classe deve possuir uma única responsabilidade dentro do software.
	
	-Open Closed Principle(Princípio Aberto-Fechado):
	"Você deve poder estender um comportamento de classe, sem modificá-lo.
	Objetos devem estar ABERTOS PARA EXTENSÃO, mas fechados para MODIFICAÇÃO.
	Quandos novos comportamentos precisam ser adicionados no software, DEVEMOS 
	ESTENDER E NÃO ALTERAR O CÓDIGO FONTE ORIGINAL.
	Preferir o uso de interfaces e extender a abstração, e não ficar adicionando 
funcionalidades nas classes existentes.

	-Liskov Substitution Principle(Princípio da Substituição de Liskov):
	"Classes derivadas devem ser substituíveis por suas classes base".
	O princípio da substituição de Liskov foi introduzido por Barbara Liskov em 1987:
		"Se para cada objeto o1 do tipo S há um objeto o2 do tipo T de forma que, para
	todos os programas P, o comportamento de P é inalterado quando o1 é substituido por o2, 
	então S é um subtipo de T."
	Ou seja, tomar muito cuidado com as abstrações feitas no código.

	-Interface Segregation Principle(Princípio da Segregação de Interface):
	"Faça Interfaces refinadas que são específicas do cliente."
	Uma classe não deve ser forçada a implementar interfaces e métodos que não serão utilizados.
	É melhor criar interfaces mais específicas ao invés de termos uma única interface genérica.
	
	-Dependency Inversion Principle (Princípio da Inversão da Dependência):
	"Dependa de abstrações e não de implementações."
	-Um módulo de alto nível não deve depender de módulos de baixo nível, ambos devem depender da 
	abstração.
	-PS: Inversão de Dependência não é igual a injeção de dependencia.